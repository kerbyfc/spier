// Generated by CoffeeScript 1.4.0
(function() {
  var Spier, fs, path, rexp, sDir, sFile, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  fs = require('fs');

  rexp = require('rexp');

  path = require('path');

  _ = require('underscore');

  Array.prototype.diff = function(arr) {
    return this.filter(function(i) {
      return !(arr.indexOf(i) > -1);
    });
  };

  sFile = (function() {

    sFile["new"] = function(_path, opts) {
      var stat;
      if (opts == null) {
        opts = {};
      }
      if ((stat = Spier.stat(_path)) && (opts = _.extend({}, opts, {
        stat: stat,
        name: path.basename(_path)
      })) && stat.isDirectory()) {
        return new Dir(opts);
      } else {
        return new File(opts);
      }
    };

    function sFile(opts) {
      if (opts == null) {
        opts = {};
      }
      _.extend(this, opts);
    }

    return sFile;

  })();

  global.sFile = sFile;

  sDir = (function() {

    function sDir(opts) {
      if (opts == null) {
        opts = {};
      }
      this.read = __bind(this.read, this);

      this.setup = __bind(this.setup, this);

      _.extend(this, opts);
      this.setup();
    }

    sDir.prototype.setup = function() {
      this.step = 0;
      this.subdirs = false;
      this.changed = null;
      this.files = {};
      this.cache = {};
      this.index = {
        current: [],
        existed: [],
        ignored: [],
        subdirs: []
      };
      return this.history = {};
    };

    sDir.prototype.cleanup = function(stat) {
      if (stat == null) {
        stat = null;
      }
      this.index.existed = (function(c) {
        return c;
      })(this.index.current);
      this.index.current = [];
      this.index.subdirs = [];
      this.cache = {};
      if (stat != null) {
        return this.stat = stat;
      }
    };

    sDir.prototype.cached = function(filename) {
      return this.cache[filename] || sFile["new"](path.join(this.path, filename), this);
    };

    sDir.prototype.check = function(filename) {
      var stat, _path;
      _path = path.join(this.path, filename);
      if (this.isInIgnore(_path)) {
        return this.ignore(filename);
      }
      stat = Spier.stat(_path);
      if (!this.matchPattern(_path) && !stat.isDirectory()) {
        return this.ignore(filename);
      } else {
        return this.cache[filename] = stat.isDirectory() ? new Dir(_path, stat, this.options, this) : new File(_path, stat);
      }
    };

    sDir.prototype.isInIgnore = function(_path) {
      if (this.options.debug) {
        console.log("" + _path + " " + ((this.options.ignore != null) && this.options.ignore.test(_path) ? 'WAS' : 'WASN`T') + " ignored by " + this.options.ignore + " pattern");
      }
      return (this.options.ignore != null) && this.options.ignore.test(_path);
    };

    sDir.prototype.matchPattern = function(path) {
      if (this.options.debug) {
        console.log("" + _path + " " + (!(this.options.target != null) || this.options.target.test(_path) ? 'WAS' : 'WASN`T') + " processed by " + this.options.target + " pattern");
      }
      return !(this.options.target != null) || this.options.target.test(_path);
    };

    sDir.prototype.ignore = function(filename) {
      this.index.ignored.push(filename);
      return false;
    };

    sDir.prototype.read = function() {
      var filename, tmpStat;
      tmpStat = Spier.stat(this.path);
      this.changed = (function() {
        var _i, _len, _ref;
        if (this.stat.atime.getTime() !== tmpStat.atime.getTime() || this.changed === null || true) {
          this.cleanup(tmpStat);
          _ref = fs.readdirSync(this.path);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            filename = _ref[_i];
            if (__indexOf.call(this.index.ignored, filename) < 0) {
              this.add(filename);
            }
          }
          return true;
        } else {
          return false;
        }
      }).call(this);
      this.step++;
      return this;
    };

    sDir.prototype.add = function(filename) {
      if (__indexOf.call(this.index.existed, filename) >= 0 || this.check(filename)) {
        return this.index.current.push(filename);
      }
    };

    sDir.prototype.archive = function(filename, event, file) {
      var _base, _ref;
      if ((_ref = (_base = this.history)[filename]) == null) {
        _base[filename] = [];
      }
      this.history[filename].push([event, file]);
      if (this.history[filename].length > 20) {
        return this.history[filename].shift();
      }
    };

    sDir.prototype.trigger = function(event, file) {
      if (this.step) {
        Spier.instances[this.options.id].handlers[event](file);
      }
      return this.archive(file.name, event, file);
    };

    sDir.prototype.invoke = function() {
      var data, event, file;
      event = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((file = this[event].apply(this, data))) {
        return this.trigger(event, file);
      }
    };

    sDir.prototype.create = function(filename, file) {
      if (file == null) {
        file = false;
      }
      this.files[filename] = file || this.cached(filename);
      if (this.files[filename].stat.isDirectory()) {
        this.index.subdirs.push(filename);
        this.subdirs = true;
      }
      if (this.files[filename].stat.isDirectory() && (!this.options.folders || this.options.skipEmpty)) {
        return false;
      } else {
        if (this.options.skipEmpty && (this.parent != null) && !this.parent.history[this.name]) {
          this.parent.trigger('create', this);
          if (!this.files[filename].stat.isDirectory()) {
            return this.files[filename];
          } else {
            return false;
          }
        } else {
          return this.files[filename];
        }
      }
    };

    sDir.prototype.remove = function(filename) {
      var tmp,
        _this = this;
      tmp = (function() {
        return _this.files[filename];
      })();
      delete this.files[filename];
      return tmp;
    };

    sDir.prototype.rename = function(oldname, newname) {
      this.files[newname] = this.files[oldname];
      this.files[newname].path = path.join(this.path, newname);
      this.files[newname].name = newname;
      this.files[newname].lastname = oldname;
      delete this.files[oldname];
      return this.files[newname];
    };

    sDir.prototype.change = function(filename) {
      var curr;
      curr = Spier.stat(this.path, filename);
      if (curr.isDirectory() && (this.files[filename].stat.atime.getTime() !== curr.atime.getTime() || this.files[filename].subdirs)) {
        this.files[filename].stat = curr;
        this.index.subdirs.push(filename);
        return false;
      } else if (!curr.isDirectory() && this.files[filename].stat.ctime.getTime() !== curr.ctime.getTime()) {
        this.files[filename].stat = curr;
        return this.files[filename];
      } else {
        return false;
      }
    };

    sDir.prototype.filenames = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        _results.push(name);
      }
      return _results;
    };

    sDir.prototype.paths = function(filenames) {
      var filename, _i, _len, _results;
      if (filenames == null) {
        filenames = this.filenames();
      }
      _results = [];
      for (_i = 0, _len = filenames.length; _i < _len; _i++) {
        filename = filenames[_i];
        _results.push(path.join(this.path, filename));
      }
      return _results;
    };

    sDir.prototype.directories = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        if (file.stat.isDirectory()) {
          _results.push(file);
        }
      }
      return _results;
    };

    sDir.prototype.compare = function() {
      var created, current, existed, file, removed, subdir, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _results;
      if (this.changed) {
        existed = this.index.existed;
        current = this.index.current;
        created = current.diff(existed);
        removed = existed.diff(current);
        console.log(this.path, 'EXISTED', existed, 'CURRENT', current, 'CREATED', created, 'REMOVED', removed);
        if (removed.length === created.length && created.length === 1) {
          this.invoke('rename', removed[0], created[0]);
        } else {
          for (_i = 0, _len = created.length; _i < _len; _i++) {
            file = created[_i];
            this.invoke('create', file);
          }
          for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
            file = removed[_j];
            this.invoke('remove', file);
          }
          _ref = existed.diff(removed);
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            file = _ref[_k];
            this.invoke('change', file);
          }
        }
      }
      console.log("SUBDIRS", this.index.subdirs);
      _ref1 = this.index.subdirs;
      _results = [];
      for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
        subdir = _ref1[_l];
        _results.push(this.files[subdir].read().compare());
      }
      return _results;
    };

    return sDir;

  })();

  global.sDir = sDir;

  Spier = (function() {

    Spier.noop = function(e) {
      this.e = e;
      return this.fire = function(file) {
        return console.log("" + this.e + " " + file.stat.isDirectory() ? 'directory' : 'file' + " " + file.path);
      };
    };

    Spier.spy = function(target, options) {
      return new Spier(options).spy(target);
    };

    Spier.stat = function() {
      var slices;
      slices = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fs.statSync(path.join.apply(path, slices));
    };

    Spier.prototype.defaults = {
      ignore: null,
      target: null
    };

    Spier.prototype.flags = {
      strict: false,
      primary: false,
      folders: false,
      dotfiles: false,
      noops: false
    };

    Spier.prototype.delay = 50;

    function Spier(opts) {
      if (opts == null) {
        opts = {};
      }
      this.configure(opts);
    }

    Spier.prototype.configure = function(opts, options) {
      var option, value, _ref;
      this.options = options != null ? options : {};
      _ref = _.extend({}, this.defaults, this.flags, opts);
      for (option in _ref) {
        value = _ref[option];
        this.setup(options, value);
      }
      return this;
    };

    Spier.prototype.setup = function(option, value) {
      return this.options[option] = option !== 'ignore' && option !== 'target' ? value : rexp.create(value, {
        dot: this.options.dotfiles
      });
    };

    Spier.prototype.spy = function(target) {
      if (target == null) {
        target = './**/*';
      }
      this.setup('target', this.seton(target));
      return this.start();
    };

    Spier.prototype.seton = function(target) {
      if (typeof target === 'string') {
        this.root = target.substr(0, target.indexOf('/'));
      }
      return target;
    };

    Spier.prototype.stop = function(pause) {
      this.pause = pause != null ? pause : true;
      return this.timeout = clearTimeout(this.timeout) || null;
    };

    Spier.prototype.start = function(pause) {
      this.pause = pause != null ? pause : false;
      this.scope = new Dir(this.options.root, Spier.stat(this.root, this.options)).read().compare();
      return this.lookout();
    };

    Spier.prototype.lookout = function() {
      var _this = this;
      this.timeout = setTimeout(function() {
        return _this.lookout(_this.scope.read().compare());
      }, this.delay);
      return this;
    };

    Spier.prototype.on = function(event, handler) {
      this.handlers[event] = handler;
      return this;
    };

    Spier.prototype.shutdown = function(msg) {
      console.error(msg);
      return process.exit(0);
    };

    return Spier;

  })();

  module.exports = Spier;

}).call(this);
