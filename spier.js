// Generated by CoffeeScript 1.4.0
(function() {
  var Dir, File, Spier, fs,
    __slice = [].slice;

  fs = require('fs');

  Array.prototype.diff = function(arr) {
    return this.filter(function(i) {
      return !(arr.indexOf(i) > -1);
    });
  };

  File = (function() {

    File.prototype.stat = function() {
      var parts, _ref;
      parts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fs.statSync((_ref = File.prototype).path.apply(_ref, parts));
    };

    File.prototype.path = function() {
      var parts;
      parts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return parts.join(Dir.prototype.separator);
    };

    File.prototype["new"] = function() {
      var parts, path, stat, _ref;
      parts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      path = (_ref = File.prototype).path.apply(_ref, parts);
      stat = File.prototype.stat(path);
      if (stat.isDirectory()) {
        return new Dir(path, stat);
      } else {
        return new File(path, stat);
      }
    };

    function File(path, stat) {
      this.path = path;
      this.name = this.path.split(Dir.prototype.separator).slice(-1)[0];
      this.stat = stat;
    }

    return File;

  })();

  Dir = (function() {

    Dir.prototype.separator = process.platform.match(/^win/) != null ? '\\' : '/';

    function Dir(path, stat) {
      this.files = {};
      this.path = path;
      this.name = this.path.split(Dir.prototype.separator).slice(-1)[0];
      this.stat = stat;
    }

    Dir.prototype.read = function() {
      var name, _i, _len, _ref;
      _ref = fs.readdirSync(this.path);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        this.files[name] = File.prototype["new"](this.path, name);
      }
      return this;
    };

    Dir.prototype.invoke = function() {
      var data, event, tmp, _ref;
      event = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((tmp = this[event].apply(this, data))) {
        return (_ref = Spier.prototype)[event].apply(_ref, tmp);
      }
    };

    Dir.prototype.create = function(filename) {
      this.files[filename] = File.prototype["new"](this.path, filename);
      return [this.files[filename]];
    };

    Dir.prototype.remove = function(filename) {
      var tmp,
        _this = this;
      tmp = (function() {
        return _this.files[filename];
      })();
      delete this.files[filename];
      return [tmp];
    };

    Dir.prototype.rename = function(oldname, newname) {
      this.files[newname] = this.files[oldname];
      this.files[newname].path = File.prototype.path(this.path, newname);
      this.files[newname].name = newname;
      delete this.files[oldname];
      return [File.prototype.path(this.path, oldname), this.files[newname].path, this.files[newname]];
    };

    Dir.prototype.change = function(filename) {
      var tmp;
      if (!this.files[filename].stat.isDirectory() && (tmp = File.prototype["new"](this.path, filename)) && this.files[filename].stat.ctime.getTime() !== tmp.stat.ctime.getTime()) {
        this.files[filename].stat = tmp.stat;
        return [this.files[filename]];
      }
      return false;
    };

    Dir.prototype.filenames = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        _results.push(name);
      }
      return _results;
    };

    Dir.prototype.filepaths = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        _results.push(file.path);
      }
      return _results;
    };

    Dir.prototype.directories = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        if (file.stat.isDirectory()) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dir.prototype.compare = function(dir) {
      var created, current, existed, file, removed, subdir, subdirs, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
      existed = this.filenames();
      current = dir.filenames();
      created = current.diff(existed);
      removed = existed.diff(current);
      if (removed.length === created.length && created.length === 1) {
        this.invoke('rename', removed[0], created[0]);
      } else {
        for (_i = 0, _len = created.length; _i < _len; _i++) {
          file = created[_i];
          this.invoke('create', file);
        }
        for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
          file = removed[_j];
          this.invoke('remove', file);
        }
        _ref = existed.diff(removed);
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          file = _ref[_k];
          this.invoke('change', file);
        }
      }
      subdirs = this.directories();
      if (subdirs.length > 0) {
        _results = [];
        for (_l = 0, _len3 = subdirs.length; _l < _len3; _l++) {
          subdir = subdirs[_l];
          _results.push(subdir.compare(File.prototype["new"](subdir.path).read()));
        }
        return _results;
      }
    };

    return Dir;

  })();

  Spier = (function() {

    Spier.prototype.handlers = {
      create: function() {},
      remove: function() {},
      change: function() {},
      rename: function() {}
    };

    Spier.prototype.delay = 50;

    Spier.prototype.pause = false;

    Spier.prototype.step = 0;

    function Spier(root) {
      if (root == null) {
        root = 'app';
      }
      this.scope = File.prototype["new"](root);
      if (!this.root.stat.isDirectory()) {
        throw new Error('Specify directory path for spying');
      }
      this;

    }

    Spier.prototype.lookout = function() {
      var reality,
        _this = this;
      reality = File.prototype["new"](this.root.path).read();
      this.scope.compare(reality);
      if (!this.pause) {
        return setTimeout(function() {
          _this.lookout();
          return _this.step++;
        }, this.delay);
      }
    };

    Spier.prototype.stop = function() {
      return this.pause = true;
    };

    Spier.prototype.start = function() {
      this.step = 0;
      this.pause = false;
      return this.lookout();
    };

    Spier.prototype.on = function(event, handler) {
      var _this = this;
      Spier.prototype[event] = function() {
        if (_this.step !== 0) {
          return handler.apply(null, arguments);
        }
      };
      return this;
    };

    return Spier;

  })();

  module.exports = Spier;

}).call(this);
