// Generated by CoffeeScript 1.4.0
(function() {
  var Cacheable, Dir, File, Slice, Watcher, fs, watcher,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  fs = require('fs');

  Array.prototype.diff = function(arr) {
    return this.filter(function(i) {
      return !(arr.indexOf(i) > -1);
    });
  };

  Cacheable = (function() {

    function Cacheable() {}

    Cacheable.prototype._step = -1;

    Cacheable.prototype._cache = {};

    Cacheable.prototype._actual = {};

    Cacheable.prototype.cache = function(key, data) {
      if (data == null) {
        data = null;
      }
      if (data == null) {
        return this._cache[key];
      } else {
        this._step[key] = Watcher.prototype.step;
        return this._cache[key] = data;
      }
    };

    Cacheable.prototype.actual = function(cache) {
      return (this._step[cache] != null) && this._step[cache] === Watcher.prototype.step;
    };

    return Cacheable;

  })();

  File = (function(_super) {

    __extends(File, _super);

    File.prototype.stat = function(path) {
      return fs.statSync(path);
    };

    File.prototype.path = function() {
      var parts;
      parts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return parts.join(Dir.prototype.separator);
    };

    function File(dir, name) {
      this.dir = dir;
      this.name = name;
      this.path = this.dir + Dir.prototype.separator + this.name;
      this.stat = File.prototype.stat(this.path);
    }

    return File;

  })(Cacheable);

  Dir = (function(_super) {

    __extends(Dir, _super);

    Dir.prototype.separator = process.platform.match(/^win/) != null ? '\\' : '/';

    function Dir(path) {
      var filename;
      this.path = path;
      this.files = ((function() {
        var _i, _len, _ref, _results;
        _ref = fs.readdirSync(this.path);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filename = _ref[_i];
          _results.push(new File(this.path, filename));
        }
        return _results;
      }).call(this)) || [];
    }

    Dir.prototype.get = function(attr) {
      var file;
      if (!this.actual(attr)) {
        return this.cache(attr, (function() {
          var _i, _len, _ref, _results;
          _ref = this.files;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            _results.push(file[attr]);
          }
          return _results;
        }).call(this));
      } else {
        return this.cache(attr);
      }
    };

    Dir.prototype.filenames = function() {
      return this.get('name');
    };

    Dir.prototype.filepaths = function() {
      return this.get('path');
    };

    Dir.prototype.sub = function() {
      var file, _i, _len, _ref, _results;
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.stat.isDirectory()) {
          _results.push(file.path);
        }
      }
      return _results;
    };

    return Dir;

  })(Cacheable);

  Slice = (function(_super) {

    __extends(Slice, _super);

    function Slice(depth) {
      this.depth = depth;
      this.files = {};
      this.events = {};
    }

    Slice.prototype.existing = function(dir) {
      var file, path;
      return ((function() {
        var _ref, _results;
        _ref = this.files;
        _results = [];
        for (path in _ref) {
          file = _ref[path];
          if (file.path.indexOf(dir === 0)) {
            _results.push(file.name);
          }
        }
        return _results;
      }).call(this)) || [];
    };

    Slice.prototype.get = function(path) {
      return this.files[path];
    };

    Slice.prototype.invoke = function() {
      var data, event;
      event = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this[event].apply(this, data);
      return this.events[event] = data;
    };

    Slice.prototype.create = function(file, silence) {
      if (silence == null) {
        silence = false;
      }
      this.files[file.path] = file;
      if (!silence) {
        return console.log('create', file.path);
      }
    };

    Slice.prototype.remove = function(file, silence) {
      if (silence == null) {
        silence = false;
      }
      delete this.files[file.path];
      if (!silence) {
        return console.log('remove', file.path);
      }
    };

    Slice.prototype.rename = function(prev, curr) {
      this.create(curr, true);
      this.remove(prev, true);
      return console.log('rename', prev.path, 'to', curr.path);
    };

    Slice.prototype.diff = function(dir) {
      var created, existing, file, removed, _i, _j, _k, _len, _len1, _len2, _results, _results1;
      console.log("->", dir.path);
      this.events = {};
      existing = this.existing(dir.path);
      created = dir.filenames().diff(existing);
      if (Watcher.prototype.step > 0) {
        removed = existing.diff(dir.filenames());
        if (removed.length === created.length && created.length === 1) {
          return this.invoke('rename', this.get(File.prototype.path(dir.path, removed[0])), new File(dir.path, created[0]));
        } else {
          for (_i = 0, _len = created.length; _i < _len; _i++) {
            file = created[_i];
            this.invoke('create', new File(dir.path, file));
          }
          _results = [];
          for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
            file = removed[_j];
            _results.push(this.invoke('remove', this.get(File.prototype.path(dir.path, file))));
          }
          return _results;
        }
      } else {
        _results1 = [];
        for (_k = 0, _len2 = created.length; _k < _len2; _k++) {
          file = created[_k];
          _results1.push(this.invoke('create', new File(dir.path, file)));
        }
        return _results1;
      }
    };

    return Slice;

  })(Cacheable);

  Watcher = (function() {

    Watcher.prototype.check = function(path) {
      var curr, prev;
      if ((prev = this.get(path)) && !prev.isDirectory()) {
        curr = this.stat(path);
        if (curr.ctime.getTime() !== prev.ctime.getTime()) {
          return this.changes['change'].push([path, prev, curr]);
        }
      }
    };

    Watcher.prototype.step = 0;

    Watcher.prototype._struct = [];

    Watcher.prototype.depth = 0;

    Watcher.prototype.handlers = {
      create: function() {},
      remove: function() {},
      change: function() {},
      rename: function() {}
    };

    Watcher.prototype.speed = 1000;

    function Watcher(root) {
      this.root = root != null ? root : 'app';
      this.watch(this.root);
    }

    Watcher.prototype.slice = function() {
      return this._struct[this.depth] || null;
    };

    Watcher.prototype.watch = function(path) {
      var dir, sub, _i, _len, _ref;
      if (this.slice() == null) {
        this._struct[this.depth] = new Slice(this.depth);
      }
      dir = new Dir(path);
      this.slice().diff(dir);
      if (dir.sub().length) {
        this.depth++;
        _ref = dir.sub();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sub = _ref[_i];
          this.watch(sub);
        }
        this.depth--;
      }
      return Watcher.prototype.step++;
    };

    Watcher.prototype.on = function(action, handler) {
      this.handlers[action] = handler;
      return this;
    };

    Watcher.prototype.run = function() {
      var _this = this;
      this.watch(this.root);
      return setInterval(function() {
        return _this.watch(_this.root);
      }, this.speed);
    };

    return Watcher;

  })();

  watcher = new Watcher('testdir');

  watcher.on('create', function(path, file) {
    return console.log('>>> CREATED', path);
  });

  watcher.on('remove', function(path, file) {
    return console.log('>>> REMOVED', path);
  });

  watcher.on('change', function(path, prev, curr) {
    return console.log('>>> CHANGED', path);
  });

  watcher.on('rename', function(path, newpath, file) {
    return console.log('>>> RENAMED from ' + path + ' to ' + newpath);
  });

  watcher.run();

}).call(this);
