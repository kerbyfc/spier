// Generated by CoffeeScript 1.4.0
(function() {
  var Watcher, fs, watcher,
    __slice = [].slice;

  fs = require('fs');

  Array.prototype.diff = function(arr) {
    return this.filter(function(i) {
      return !(arr.indexOf(i) > -1);
    });
  };

  Watcher = (function() {

    Watcher.prototype.tree = [];

    Watcher.prototype.index = {};

    Watcher.prototype.approach = {};

    Watcher.prototype.depth = 0;

    Watcher.prototype.step = 0;

    Watcher.prototype.renamed = {};

    Watcher.prototype.handlers = {
      create: function() {},
      remove: function() {},
      change: function() {},
      rename: function() {}
    };

    Watcher.prototype.speed = 200;

    function Watcher(root) {
      this.root = root != null ? root : 'app';
      this.watch(this.root);
    }

    Watcher.prototype.path = function() {
      var parts;
      parts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return parts.join('/');
    };

    Watcher.prototype.exists = function(depth, files) {
      var key, val, _ref;
      if (depth == null) {
        depth = this.depth;
      }
      if (files == null) {
        files = [];
      }
      _ref = this.tree[depth];
      for (key in _ref) {
        val = _ref[key];
        files.push(key.slice(key.lastIndexOf('/') + 1));
      }
      return files;
    };

    Watcher.prototype.subpaths = function(depth, parent_path, paths) {
      var file, path, _ref;
      if (depth == null) {
        depth = this.depth;
      }
      if (paths == null) {
        paths = [];
      }
      _ref = this.tree[depth];
      for (path in _ref) {
        file = _ref[path];
        paths.push(path);
      }
      return paths;
    };

    Watcher.prototype.files = function(dir) {
      return fs.readdirSync(dir);
    };

    Watcher.prototype.dirs = function(files) {
      var file, stat, _ref;
      if (files == null) {
        files = [];
      }
      _ref = this.tree[this.depth];
      for (file in _ref) {
        stat = _ref[file];
        if (stat.isDirectory()) {
          files.push(file);
        }
      }
      return files;
    };

    Watcher.prototype.on = function(action, handler) {
      this.handlers[action] = handler;
      return this;
    };

    Watcher.prototype.subs = function(depth, path, files) {
      var file, _i, _len, _ref;
      if (depth == null) {
        depth = this.depth;
      }
      if (files == null) {
        files = [];
      }
      _ref = this.exists(depth);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.indexOf(path) === 0) {
          files.push(file);
        }
      }
      return files;
    };

    Watcher.prototype.watch = function(dir) {
      var action, actions, created, curr, current, file, path, prev, removed, results, subdirs, type, _base, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _name, _ref, _ref1, _ref2, _ref3;
      if ((_ref = (_base = this.tree)[_name = this.depth]) == null) {
        _base[_name] = {};
      }
      this.index[dir] = this.depth;
      this.approach = {
        change: [],
        remove: [],
        create: [],
        rename: []
      };
      current = this.files(dir);
      created = current.diff(this.exists());
      for (_i = 0, _len = created.length; _i < _len; _i++) {
        file = created[_i];
        path = this.path(dir, file);
        this.approach['create'].push([path, this.stat(path)]);
      }
      if (this.step > 0) {
        removed = this.exists().diff(current);
        for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
          file = removed[_j];
          path = this.path(dir, file);
          this.approach['remove'].push([path]);
        }
        _ref1 = current.diff(removed);
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          file = _ref1[_k];
          this.check(this.path(dir, file));
        }
        if (this.approach['remove'].length === this.approach['create'].length && this.approach['remove'].length === 1) {
          prev = this.approach['remove'][0];
          curr = this.approach['create'][0];
          this.approach['rename'].push([prev[0], curr[0], curr[1]]);
          this.approach['remove'] = [];
          this.approach['create'] = [];
        }
      }
      _ref2 = this.approach;
      for (type in _ref2) {
        actions = _ref2[type];
        for (_l = 0, _len3 = actions.length; _l < _len3; _l++) {
          action = actions[_l];
          results = this[type].apply(this, action);
          if (results && this.step > 0) {
            (_ref3 = this.handlers)[type].apply(_ref3, results);
          }
        }
      }
      subdirs = this.dirs();
      if (subdirs.length) {
        this.depth++;
        for (_m = 0, _len4 = subdirs.length; _m < _len4; _m++) {
          dir = subdirs[_m];
          this.watch(dir);
        }
        this.depth--;
      }
      this.renamed = {};
      return this.step++;
    };

    Watcher.prototype.change = function(path, prev, curr) {
      this.add(path, this.depth, curr);
      return [path, prev, curr];
    };

    Watcher.prototype.remove = function(path, depth, removed) {
      var dir, file, files, prev, stat, _i, _len;
      if (depth == null) {
        depth = this.depth;
      }
      if (removed == null) {
        removed = null;
      }
      prev = this.get(path) || removed;
      this.unset(path, depth);
      if (prev) {
        if (prev.isDirectory()) {
          if (this.renamed[this.depth] != null) {
            dir = this.depth !== depth ? this.renamed[this.depth][1] + path.slice(path.lastIndexOf('/')) : this.renamed[this.depth][1];
            files = this.files(dir);
          } else {
            dir = path;
            files = this.subpaths(depth + 1, dir);
          }
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            if (dir !== path) {
              stat = this.add(this.path(dir, file), depth + 1);
              this.remove(this.path(path, file), depth + 1, stat);
            } else {
              this.remove(file, depth + 1, this.get(file, depth + 1));
            }
          }
        }
        return [path, prev];
      } else {
        return false;
      }
    };

    Watcher.prototype.create = function(path) {
      return [path, this.add(path)];
    };

    Watcher.prototype.rename = function(prevPath, currPath, curr) {
      this.renamed[this.depth] = [prevPath, currPath];
      this.remove(prevPath);
      this.add(currPath);
      return [prevPath, currPath, curr];
    };

    Watcher.prototype.get = function(path, depth) {
      if (depth == null) {
        depth = this.depth;
      }
      if (this.tree[depth] == null) {
        return false;
      } else {
        return this.tree[depth][path] || false;
      }
    };

    Watcher.prototype.add = function(path, depth, stat) {
      if (depth == null) {
        depth = this.depth;
      }
      if (stat == null) {
        stat = null;
      }
      if (stat == null) {
        stat = this.stat(path);
      }
      this.tree[depth][path] = stat;
      return stat;
    };

    Watcher.prototype.unset = function(path, depth) {
      if (depth == null) {
        depth = this.depth;
      }
      if (this.tree[depth][path] != null) {
        return delete this.tree[depth][path];
      }
    };

    Watcher.prototype.stat = function(path) {
      return fs.statSync(path);
    };

    Watcher.prototype.check = function(path) {
      var curr, prev;
      if ((prev = this.get(path)) && !prev.isDirectory()) {
        curr = this.stat(path);
        if (curr.ctime.getTime() !== prev.ctime.getTime()) {
          return this.approach['change'].push([path, prev, curr]);
        }
      }
    };

    Watcher.prototype.run = function() {
      var _this = this;
      this.watch(this.root);
      return setInterval(function() {
        return _this.watch(_this.root);
      }, this.speed);
    };

    return Watcher;

  })();

  watcher = new Watcher('app');

  watcher.on('create', function(path, file) {
    return console.log('>>> CREATED', path);
  });

  watcher.on('remove', function(path, file) {
    return console.log('>>> REMOVED', path);
  });

  watcher.on('change', function(path, prev, curr) {
    return console.log('>>> CHANGED', path);
  });

  watcher.on('rename', function(path, newpath, file) {
    return console.log('>>> RENAMED from ' + path + ' to ' + newpath);
  });

  watcher.run();

}).call(this);
