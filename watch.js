// Generated by CoffeeScript 1.4.0
(function() {
  var Cacheable, Dir, File, Watcher, fs, watcher,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  fs = require('fs');

  Array.prototype.diff = function(arr) {
    return this.filter(function(i) {
      return !(arr.indexOf(i) > -1);
    });
  };

  Cacheable = (function() {

    function Cacheable() {}

    Cacheable.prototype._step = -1;

    Cacheable.prototype._cache = {};

    Cacheable.prototype._actual = {};

    Cacheable.prototype.cache = function(key, data) {
      if (data == null) {
        data = null;
      }
      if (data == null) {
        return this._cache[key];
      } else {
        this._step[key] = Watcher.prototype.step;
        return this._cache[key] = data;
      }
    };

    Cacheable.prototype.actual = function(cache) {
      return (this._step[cache] != null) && this._step[cache] === Watcher.prototype.step;
    };

    return Cacheable;

  })();

  File = (function(_super) {

    __extends(File, _super);

    File.prototype.stat = function(path) {
      return fs.statSync(path);
    };

    File.prototype.path = function() {
      var parts;
      parts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return parts.join(Dir.prototype.separator);
    };

    File.prototype["new"] = function() {
      var parts, path, stat, _ref;
      parts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      path = (_ref = File.prototype).path.apply(_ref, parts);
      stat = File.prototype.stat(path);
      if (stat.isDirectory()) {
        return new Dir(path, stat);
      } else {
        return new File(path, stat);
      }
    };

    File.prototype.name = function() {
      return this.path.split(Dir.prototype.separator).slice(-1)[0];
    };

    function File(path, stat) {
      this.path = path;
      this.stat = stat;
    }

    return File;

  })(Cacheable);

  Dir = (function(_super) {

    __extends(Dir, _super);

    Dir.prototype.files = {};

    Dir.prototype.separator = process.platform.match(/^win/) != null ? '\\' : '/';

    function Dir(path, stat) {
      this.path = path;
      this.stat = stat;
    }

    Dir.prototype.name = function() {
      return this.path.split(Dir.prototype.separator).slice(-1)[0];
    };

    Dir.prototype.read = function() {
      var name, _i, _len, _ref;
      _ref = fs.readdirSync(this.path);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        this.files[name] = File.prototype["new"](this.path, name);
      }
      return this;
    };

    Dir.prototype.invoke = function() {
      var data, event, _ref;
      event = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this[event].apply(this, data);
      console.log("Watcher" + event, Watcher.prototype[event]);
      return (_ref = Watcher.prototype)[event].apply(_ref, data);
    };

    Dir.prototype.create = function(filename) {
      return this.files[filename] = File.prototype["new"](this.path, filename);
    };

    Dir.prototype.remove = function(filename) {
      return delete this.files[filename];
    };

    Dir.prototype.rename = function(oldname, newname) {
      this.files[newname] = this.files[oldname];
      return delete this.files[oldname];
    };

    Dir.prototype.filenames = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        _results.push(name);
      }
      return _results;
    };

    Dir.prototype.filepaths = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        _results.push(file.path);
      }
      return _results;
    };

    Dir.prototype.directories = function() {
      var file, name, _ref, _results;
      _ref = this.files;
      _results = [];
      for (name in _ref) {
        file = _ref[name];
        if (file.stat.isDirectory()) {
          _results.push(file);
        }
      }
      return _results;
    };

    Dir.prototype.diff = function(dir) {
      var created, file, removed, subdir, subdirs, _i, _j, _k, _len, _len1, _len2, _results;
      console.log("WATCH", this.path);
      created = dir.filenames().diff(this.filenames());
      removed = this.filenames().diff(dir.filenames());
      console.log('created', created);
      console.log('removed', removed);
      if (removed.length === created.length && created.length === 1) {
        this.invoke('rename', removed[0], created[0]);
      } else {
        for (_i = 0, _len = created.length; _i < _len; _i++) {
          file = created[_i];
          this.invoke('create', file);
        }
        for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
          file = removed[_j];
          this.invoke('remove', file);
        }
      }
      subdirs = this.directories();
      console.log(' >> ', subdirs);
      if (subdirs.length > 0) {
        _results = [];
        for (_k = 0, _len2 = subdirs.length; _k < _len2; _k++) {
          subdir = subdirs[_k];
          _results.push(subdir.diff(File.prototype["new"](subdir.path).read()));
        }
        return _results;
      }
    };

    return Dir;

  })(Cacheable);

  Watcher = (function() {

    Watcher.prototype.check = function(path) {
      var curr, prev;
      if ((prev = this.get(path)) && !prev.isDirectory()) {
        curr = this.stat(path);
        if (curr.ctime.getTime() !== prev.ctime.getTime()) {
          return this.changes['change'].push([path, prev, curr]);
        }
      }
    };

    Watcher.prototype.step = 0;

    Watcher.prototype._struct = [];

    Watcher.prototype.depth = 0;

    Watcher.prototype.handlers = {
      create: function() {},
      remove: function() {},
      change: function() {},
      rename: function() {}
    };

    Watcher.prototype.speed = 1000;

    function Watcher(root) {
      if (root == null) {
        root = 'app';
      }
      this.root = File.prototype["new"](root);
      if (!this.root.stat.isDirectory()) {
        throw new Error('Directory was expected');
      }
    }

    Watcher.prototype.watch = function() {
      var dir;
      dir = File.prototype["new"](this.root.path).read();
      return this.root.diff(dir);
    };

    Watcher.prototype.on = function(event, handler) {
      Watcher.prototype[event] = handler;
      return this;
    };

    Watcher.prototype.run = function() {
      var _this = this;
      setInterval(function() {
        return _this.watch();
      }, this.speed);
      return setInterval(function() {
        var depth, slice, _ref;
        console.log("TREE ============================");
        _ref = _this._struct;
        for (depth in _ref) {
          slice = _ref[depth];
          console.log(" >> ", depth, slice);
        }
        return console.log("TREE ============================");
      }, 5000);
    };

    return Watcher;

  })();

  watcher = new Watcher('testdir');

  watcher.on('create', function(path, file) {
    return console.log('>>> CREATED', path);
  });

  watcher.on('remove', function(path, file) {
    return console.log('>>> REMOVED', path);
  });

  watcher.on('change', function(path, prev, curr) {
    return console.log('>>> CHANGED', path);
  });

  watcher.on('rename', function(path, newpath, file) {
    return console.log('>>> RENAMED from ' + path + ' to ' + newpath);
  });

  watcher.run();

}).call(this);
